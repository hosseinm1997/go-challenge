// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: segment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SegmentClient is the client API for Segment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentClient interface {
	Push(ctx context.Context, in *PushSegmentRequest, opts ...grpc.CallOption) (*PushSegmentResponse, error)
}

type segmentClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentClient(cc grpc.ClientConnInterface) SegmentClient {
	return &segmentClient{cc}
}

func (c *segmentClient) Push(ctx context.Context, in *PushSegmentRequest, opts ...grpc.CallOption) (*PushSegmentResponse, error) {
	out := new(PushSegmentResponse)
	err := c.cc.Invoke(ctx, "/segment.Segment/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentServer is the server API for Segment service.
// All implementations must embed UnimplementedSegmentServer
// for forward compatibility
type SegmentServer interface {
	Push(context.Context, *PushSegmentRequest) (*PushSegmentResponse, error)
	mustEmbedUnimplementedSegmentServer()
}

// UnimplementedSegmentServer must be embedded to have forward compatible implementations.
type UnimplementedSegmentServer struct {
}

func (UnimplementedSegmentServer) Push(context.Context, *PushSegmentRequest) (*PushSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedSegmentServer) mustEmbedUnimplementedSegmentServer() {}

// UnsafeSegmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentServer will
// result in compilation errors.
type UnsafeSegmentServer interface {
	mustEmbedUnimplementedSegmentServer()
}

func RegisterSegmentServer(s grpc.ServiceRegistrar, srv SegmentServer) {
	s.RegisterService(&Segment_ServiceDesc, srv)
}

func _Segment_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/segment.Segment/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServer).Push(ctx, req.(*PushSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Segment_ServiceDesc is the grpc.ServiceDesc for Segment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Segment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "segment.Segment",
	HandlerType: (*SegmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Segment_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segment.proto",
}
