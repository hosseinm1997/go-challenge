// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: estimation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstimationClient is the client API for Estimation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimationClient interface {
	Count(ctx context.Context, in *EstimationRequest, opts ...grpc.CallOption) (*EstimationResponse, error)
}

type estimationClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimationClient(cc grpc.ClientConnInterface) EstimationClient {
	return &estimationClient{cc}
}

func (c *estimationClient) Count(ctx context.Context, in *EstimationRequest, opts ...grpc.CallOption) (*EstimationResponse, error) {
	out := new(EstimationResponse)
	err := c.cc.Invoke(ctx, "/estimation.Estimation/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimationServer is the server API for Estimation service.
// All implementations must embed UnimplementedEstimationServer
// for forward compatibility
type EstimationServer interface {
	Count(context.Context, *EstimationRequest) (*EstimationResponse, error)
	mustEmbedUnimplementedEstimationServer()
}

// UnimplementedEstimationServer must be embedded to have forward compatible implementations.
type UnimplementedEstimationServer struct {
}

func (UnimplementedEstimationServer) Count(context.Context, *EstimationRequest) (*EstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedEstimationServer) mustEmbedUnimplementedEstimationServer() {}

// UnsafeEstimationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimationServer will
// result in compilation errors.
type UnsafeEstimationServer interface {
	mustEmbedUnimplementedEstimationServer()
}

func RegisterEstimationServer(s grpc.ServiceRegistrar, srv EstimationServer) {
	s.RegisterService(&Estimation_ServiceDesc, srv)
}

func _Estimation_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimationServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimation.Estimation/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimationServer).Count(ctx, req.(*EstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Estimation_ServiceDesc is the grpc.ServiceDesc for Estimation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Estimation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimation.Estimation",
	HandlerType: (*EstimationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _Estimation_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimation.proto",
}
